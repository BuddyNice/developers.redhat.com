// Generic component color styles
// To Add a new color theme simply extend the data below to include the required color changes 
$componentStyles: (
    'dark': (
        'foregroundColor': var(--rhd-theme--component-font--color-light),
        'backgroundColor': var(--rhd-theme--component-background--color-dark),
        'linkColor': #{$malibu},
        'linkHoverColor': #{$dodger-blue},
        'addImagePadding': true,
        'buttonOverrides': (
                'pf-m-link': (
                    'Color': #{$malibu},
                    'hover--Color': #{$dodger-blue},
                    'active--Color': #{$dodger-blue}
                ),
                'pf-m-link--secondary': (
                    'Color': #{$white},
                    'hover--Color': #{$white},
                    'active--Color': #{$white}
                ),
                'pf-m-secondary': (
                    'Color': #{$white},
                    'hover--Color': #{$white},
                    'active--Color': #{$white},
                    'BorderColor': #{$white},
                    'hover--BorderColor': #{$white},
                    'active--BorderColor': #{$white},
                    'BackgroundColor': transparent,
                    'hover--BackgroundColor': transparent,
                    'active--BackgroundColor': transparent
                ),
                'pf-m-secondary-alt': (
                    'Color': #{$white},
                    'hover--Color': #{$white},
                    'active--Color': #{$white},
                    'BorderColor': #{$white},
                    'hover--BorderColor': #{$white},
                    'active--BorderColor': #{$white},
                    'BackgroundColor': transparent,
                    'hover--BackgroundColor': transparent,
                    'active--BackgroundColor': transparent
                ),
                'pf-m-tertiary': (
                    'Color': #{$white},
                    'hover--Color': #{$white},
                    'active--Color': #{$white},
                    'BorderColor': #{$white},
                    'hover--BorderColor': #{$white},
                    'active--BorderColor': #{$white},
                    'BackgroundColor': transparent,
                    'hover--BackgroundColor': transparent,
                    'active--BackgroundColor': transparent
                )
            )
    ),
    'gray': (
        'foregroundColor': var(--rhd-theme--component-font--color-dark),
        'backgroundColor': var(--rhd-theme--component-background--color-light),
        'linkColor': var(--rhd-c-button--m-link-dark--Color),
        'linkHoverColor': var(--rhd-c-button--m-link-dark--hover--Color),
        'addImagePadding': true,
        'buttonOverrides': ()
        )
);

@import "../mixins";

// loop through $componentStyles and generate appropriate classes.
.component {  
    @each $componentStyleName, $componentStyleData in $componentStyles {

        //mixin to be used to create color specific component styles
        &.#{$componentStyleName} {
            //--theme-debug: '#{$componentStyleName}';
            //loop through buttonOverrides write theme variant --pf-c-button variables 
            @each $themeButtonItemName, $themeButtonItemData in map-get($componentStyleData, 'buttonOverrides') {
                @each $themeButtonParamName, $themeButtonParamData in $themeButtonItemData {
                    --pf-c-button--#{$themeButtonItemName}--#{$themeButtonParamName}: #{$themeButtonParamData};
                }
            }  
         
            //Set base background padding if $addImagePadding is true
            @if map-get($componentStyleData, "addImagePadding") {
                @include with-background-padding;
            }

            background-color: map-get($componentStyleData, "backgroundColor");
            color: map-get($componentStyleData, "foregroundColor");
            --pf-c-content--Color: #{map-get($componentStyleData, "foregroundColor")};
            --pf-theme--color--ui-link: #{map-get($componentStyleData, "linkColor")};
            --pf-theme--color--ui-link--hover: #{map-get($componentStyleData, "linkHoverColor")};
        }
        //loop through buttonOverrides write theme variant --pf-c-button 'button-variant'-on-'theme-variant' classes
        .pf-c-button {
            @each $themeButtonName, $themeButtonData in map-get($componentStyleData, 'buttonOverrides') {
                .#{$themeButtonName} {
                    &-on-#{$componentStyleName} {
                        @each $themeButtonParamName, $themeButtonParamData in $themeButtonData {
                            --pf-c-button--#{$themeButtonName}--#{$themeButtonParamName}: #{$themeButtonParamData};
                        }
                    }
                }
            } 
        }  
    }
}

