//base button class
.pf-c-button {
  font-family: var(--rhd-theme--font-family);
  margin-bottom: var(--rhd-theme--container-spacer-xs);
  @media screen and (max-width: $pf-global--breakpoint--sm) {
    display: block;
    margin-bottom: var(--rhd-theme--container-spacer-md);
    width: 100%;
    white-space: normal;
  }
  // loop through $rhd-theme--base-buttons and generate appropriate button classes.
  @each $themeButtonName, $themeButtonData in $rhd-theme--base-buttons {
    &.#{$themeButtonName} {

      //loop through $themeButtonData write --pf-c-button variables 
      @at-root {
        :root {
          @each $themeButtonItemName, $themeButtonItemData in $themeButtonData {
            --pf-c-button--#{$themeButtonName}--#{$themeButtonItemName}: #{$themeButtonItemData};
          }
        }
      }

      //Set base button colors
      @if map-get($themeButtonData, "Color") {
        color: var(--pf-c-button--#{$themeButtonName}--Color);
      }
      @if map-get($themeButtonData, "BorderColor") {
        border-color: var(--pf-c-button--#{$themeButtonName}--BorderColor);
      }
      @if map-get($themeButtonData, "BackgroundColor") {
        background-color: var(--pf-c-button--#{$themeButtonName}--BackgroundColor);
      }
      

      //Set visited button colors
      &:visited {
        @if map-get($themeButtonData, "Color") {
          color: var(--pf-c-button--#{$themeButtonName}--Color);
        }
        @if map-get($themeButtonData, "BorderColor") {
          border-color: var(--pf-c-button--#{$themeButtonName}--BorderColor);
        }
        @if map-get($themeButtonData, "BackgroundColor") {
          background-color: var(--pf-c-button--#{$themeButtonName}--BackgroundColor);
        }
      }

      //Set hover and focus button colors
      &:active,
      &.pf-m-active {
        @if map-get($themeButtonData, "active--Color") {
          color: var(--pf-c-button--#{$themeButtonName}--active--Color);
        }
        @if map-get($themeButtonData, "active--BorderColor") {
          border-color: var(--pf-c-button--#{$themeButtonName}--active--BorderColor);
        }
        @if map-get($themeButtonData, "active--BackgroundColor") {
          background-color: var(--pf-c-button--#{$themeButtonName}--active--BackgroundColor);
        }
      }

      //Set hover and focus button colors
      &:hover,
      &:focus,
      &.pf-m-focus {
        @if map-get($themeButtonData, "hover--Color") {
          color: var(--pf-c-button--#{$themeButtonName}--hover--Color);
        }
        @if map-get($themeButtonData, "hover--BorderColor") {
          border-color: var(--pf-c-button--#{$themeButtonName}--hover--BorderColor);
        }
        @if map-get($themeButtonData, "hover--BackgroundColor") {
          background-color: var(--pf-c-button--#{$themeButtonName}--hover--BackgroundColor);
        }
      }
  
      //Set disabled button colors
      &:disabled,
      &.pf-m-disabled {
        color: var(--pf-c-button--disabled--Color);
        border-color: var(--pf-c-button--disabled--BorderColor);
        background-color: var(--pf-c-button--disabled--BackgroundColor);
      }
    }
  }
}

//add legacy button style classes and extend.
.button {
  @extend .pf-c-button;
  margin-bottom: var(--rhd-theme--container-spacer-xs);
  @media screen and (max-width: $pf-global--breakpoint--sm) {
    display: block;
    margin-bottom: var(--rhd-theme--container-spacer-md);
    margin-left: 0 !important;
    margin-right: 0 !important;
    white-space: normal;
  }
  border:none;

  &:hover {
    text-decoration: none !important;
  }

  &.heavy-cta {
    @extend .pf-c-button.pf-m-heavy;
    &.blue {
      @extend .pf-c-button.pf-m-primary;
    }
  }

  &.medium-cta {
    @extend .pf-c-button.pf-m-secondary;
    border:none;
    &.red {
      @extend .pf-c-button.pf-m-secondary-alt;
    }
  }
}
